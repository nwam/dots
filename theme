#!/usr/bin/env python3

import os
import shutil
import logging
import argparse
import subprocess

HOME = os.path.expanduser('~')
CONFIG = os.path.join(HOME, '.config')
DOTS = dir_path = os.path.dirname(os.path.realpath(__file__))
TEMPLATE = 'template'

I3_CONFIG = os.path.join(CONFIG, 'i3/config')
POLYBAR_CONFIG = os.path.join(CONFIG, 'polybar/config')
XDEFAULTS_CONFIG = os.path.join(HOME, '.Xdefaults')
VIS_CONFIG = os.path.join(CONFIG, 'vis/config')

I3_THEMES = os.path.join(DOTS, 'i3')
POLYBAR_THEMES = os.path.join(DOTS, 'polybar')
XDEFAULTS_THEMES = os.path.join(DOTS, 'Xdefaults')
VIS_THEMES = os.path.join(DOTS, 'vis')

I3_TEMPLATE = os.path.join(I3_THEMES, TEMPLATE)
POLYBAR_TEMPLATE = os.path.join(POLYBAR_THEMES, TEMPLATE)
XDEFAULTS_TEMPLATE = os.path.join(XDEFAULTS_THEMES, TEMPLATE)
VIS_TEMPLATE = os.path.join(VIS_THEMES, TEMPLATE)

def link(src, dst, name):
    if os.path.isfile(src):
        if os.path.exists(dst):
            os.remove(dst)
        os.link(src, dst)
    else:
        logging.warning('{} config not found at {}.'.format(name, src))

def copy(src, dst, name):
    if os.path.isfile(src):
        if os.path.exists(dst):
            os.remove(dst)
        shutil.copyfile(src, dst)
    else:
        logging.warning('{} template not found at {}.'.format(name, src))
        raise FileNotFoundError

def append(src, dst, name):
    """ Appends src to dst. """
    if os.path.isfile(src):
        with open(dst, 'a') as dst_file:
            with open(src, 'r') as src_file:
                dst_file.write('\n')
                dst_file.write(src_file.read())
    else:
        logging.warning('{} config not found at {}.'.format(name, src))
        raise FileNotFoundError

def install_templated_theme(theme, template, dst, name):
    try:
        if os.path.exists(dst):
            os.remove(dst)
        copy(template, dst, name)
        append(theme, dst, name)
    except:
        pass

if __name__ == '__main__':

    logging.basicConfig(level=logging.INFO)

    parser = argparse.ArgumentParser()
    parser.add_argument('theme',
            type = str,
            help = 'The name of the theme to use. The must be a corresponging \
                    file with the theme name in all style directories.')
    args = parser.parse_args()

    theme = args.theme

    i3 = os.path.join(I3_THEMES, theme)
    polybar = os.path.join(POLYBAR_THEMES, theme)
    xdefaults = os.path.join(XDEFAULTS_THEMES, theme)
    vis = os.path.join(VIS_THEMES, theme)

    install_templated_theme(i3, I3_TEMPLATE, I3_CONFIG, 'i3')
    install_templated_theme(
                polybar, POLYBAR_TEMPLATE, POLYBAR_CONFIG, 'polybar')
    install_templated_theme(
                xdefaults, XDEFAULTS_TEMPLATE, XDEFAULTS_CONFIG, 'Xdefaults')
    install_templated_theme(vis, VIS_TEMPLATE, VIS_CONFIG, 'vis')

    subprocess.run(['i3-msg', 'restart'])
